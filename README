README
Tema 2 Protocoale de comunicatii
Brabete Adrian 322CC

    Implementare
        Am folosit drept schelet laboratoru 8 de Multiplexare in cadrul TCP
        una dintre modificarile majore ale lab ului pentru a il transforma inschelet
        a fost inlaturarea mesajelor din cardul Language Pack-ului Australian
        (o mare pierdere), in onoarea lui inca mai exista artefacte in cod.
    
    Subscriber
        Subscriberul este foarte asemanator cu cel din cardul laboratorului,
        doar ca acum a fost adaugata interpretarea mesajelor de la stdin in comenzi
        relevante.

        De asemenea pentru primirea unui mesaj am creat o scructura noua care contine
        campurile necesare pentru afisare(TCP_response)

        Pentru testarea erorilor am folosit DIE din cadrul lab ului si un good old printf

    Server

        pentru stocarea datelor am ales sa folosec unordered_map si set din cauza posibilitati
        de a asocia usr un string cu o structura/valoare, plus usurinta folosirii lor datorita
        functilor deja existente, mai este de conditerat si faptul ca sunt optime nu a fost asta
        o prioritate(detalii in sectiunea Story)

        Ca sa gestionez fluxul de mesaje am folosit multiplexarea input/output

        Serverul dispune de o singura comanda pentru iesire: exit;
        
        Folosim 2 tipuri de socketi unul pasiv pentru client(TCP) si unul activ pentru ce vine de la
        piton(UDP)

        Un alt avantaj al structuri set este ca aceasta nu mentine duplicate deci nu trebuie sa verfic
        daca utilizatorul este deja subscriber la acel topic

        La deconectare mutam datele clientului dintr un map pentru cei online in cel pentru offline si
        memoram intr -un buffer mesajele pe care el va urma sa le primeasca la reconectare

        mesajele primite de la UDP sunt tinute in structura lor speciala UDP_msg iar apoi sunt convertite
        in mesaje TCP pentru a fi trimise la client

        pentru utilizatorii online mesajul se trimite direct si nu se mai retine

        Pentru debug as putea sa dau link la ce am scris la subscriber pentru ca am folosit aceasi metoda.


    Probleme cunoscute
        din cate pot sa imi dau seama subscriberul functioneaza corespunzator, dar serverul are o eroare 
        a carei sursa nu mai am timp sa descopar, acesta da segfault daca un utilizator da exit 
        dupa ce a primit notificari, astea inseamna ca serviciul este functional dar utilizatorii nu au
        voie sa plece :) (doar daca inca nu au primit notificari, atunci a fost free trial si sunt liberi)

    Story
        Am sa explic pe scurt motivul intarzierii temei, am lucrat la tema pe parcursul a 4 zile, mai lejer in 
        primele 2 mai intens in ultimele, dar am fost incapatanat am vrut sa rezolv totul in C si sa fac totul 
        mai "manual" in loc de map urile curente aveam vectori, alocati dinamic, de structuri. Si asta insemna 
        ca pentru fiecare vector aveam functii de cautare in vector, de egalitate, de adaugare, pe scurt totul
        devenea din ce in ce mai complex.  Astfel ca duminica pe la ora 10 al luat decizia de a rescrie tot serverul.

        Duminica dupa 16 ore de lucru continuu la tema(cu pauze de masa, eram cu moralul la pamant, in special dupa decizia
        de a rescrie, credeam ca nu o sa mai fac nimic.
        Asta a insemnat ca trebuit sa invat macar un minim de STL in C++, care a adugat la intarziere si in final am ajuns
        aici.

        Singurul motiv pentru care structurile mai sunt inca in cod sunt ca sa imi aduca aminte in viitor ca trebuie sa fac
        un plan inainte sa scriu cod.
        
        TLDR nu sunt detalii de implementare in aceasta sectiune doar niste vorbe de la un om stresat de carantina.
        

    Feedback:
        Tema nu a fost in foarte dificila, dar nici usooara, dar partea care m a confuzat cel mai mult a fost lipsa de schelet
        si checker, facultatea pana acum nu ne-a obisnuit cu testare proprie si implementare de la 0(fara un ghid).

    In concluzie 
        am terminat eseul.    